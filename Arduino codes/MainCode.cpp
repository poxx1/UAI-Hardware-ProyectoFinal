/*
  Sketch generated by the Arduino IoT Cloud Thing "ESP8266"
  https://create.arduino.cc/cloud/things/a684c126-e108-4fb5-a93f-5b85d5eb051a

  Arduino IoT Cloud Variables description
5e0bdd09-c967-4224-a26d-1e749875f8a3
TYJVAUVSFVAORHU41BCJ


  The following variables are automatically generated and updated when changes are made to the Thing

  CloudElectricPotential signalVoltage;
  CloudFrequency signalFrecuency;
  CloudTemperatureSensor signalTemperature;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"

//Inputs
int sensorPin = A0;

boolean inputState = false;
boolean lastInputState = false;
long count = 0L;

unsigned long previousCountMillis = millis();
const long countMillis = 100L;

void setInputState() {
  inputState = analogRead(sensorPin);
}

void setup() {

  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(5000);

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);

  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
  
  //pinMode(sensorPin, INPUT);
}

void loop() {
  
  ArduinoCloud.update();
  
  // Your code here
  signalVoltage = analogRead(sensorPin);
  delay(10);
  signalTemperature = analogRead(sensorPin);
  //signalFrecuency = analogRead(sensorPin);
  //delay(100);
  
  setInputState();
  
  // count every transision HIGH<->LOW
  if (inputState != lastInputState) {
    count++;  
    lastInputState = inputState;
  }

  // ------- every half second, count is equal to Hz.---------------
  if (millis() - previousCountMillis >= countMillis) {
    previousCountMillis += countMillis;
    
    // show Hz on Serial too if available
    signalFrecuency = count;
    Serial.print(count); 
    Serial.println(" Hz");

    // reset to zero for the next half second's sample
    count = 0L;
  //onSignalVoltageChange();
}
}
/*
  Since SignalVoltage is READ_WRITE variable, onSignalVoltageChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onSignalVoltageChange()  {
  // Add your code here to act upon SignalVoltage change
  
}
/*
  Since SignalFrecuency is READ_WRITE variable, onSignalFrecuencyChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onSignalFrecuencyChange()  {
  // Add your code here to act upon SignalFrecuency change

}

